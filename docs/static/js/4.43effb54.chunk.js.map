{"version":3,"sources":["components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js"],"names":["module","exports","Input","Label","InputElement","Invalid","Auth","ContactData","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","Object","_home_piotrek_Desktop_programowanie_react_burger_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","key","push","id","config","form","map","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_8__","invalid","shouldValidate","changed","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_12__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_13__","to","className","classes","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_9__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","inputElement","inputClasses","assign","onChange","join","options","option","displayValue","label"],"mappings":"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","file":"static/js/4.43effb54.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\",\"ContactData\":\"Auth_ContactData__24hjm\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Mail Address'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSignup: true\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      })\n    })\n    this.setState({ controls: updatedControls });\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n  }\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return { isSignup: !prevState.isSignup };\n    });\n  }\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n    ));\n\n    if (this.props.loading) {\n      form = <Spinner />\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = (\n        <p>{this.props.error.message}</p>\n      );\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\">SUBMIT</Button>\n        </form>\n        <Button\n          clicked={this.switchAuthModeHandler}\n          btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\nimport classes from './Input.module.css'\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n\n  if (props.invalid && props.shouldValidate && props.touched  ) {\n    inputClasses.push(classes.Invalid)\n  }\n\n  switch (props.elementType) {\n    case ('input'):\n      inputElement = <input onChange={props.changed} className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} />\n      break;\n    case ('textarea'):\n      inputElement = <textarea onChange={props.changed} className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} />\n      break;\n    case ('select'):\n      inputElement = (\n        <select onChange={props.changed} className={inputClasses.join(' ')} value={props.value} >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>{option.displayValue}</option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = <input onChange={props.changed} className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} />\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  )\n};\n\nexport default input;"],"sourceRoot":""}